@page "/day-summary/{bookId:int}/{dateFromStr}/{dateToStr}"
@using System.Globalization
@using Microsoft.EntityFrameworkCore
@using HospitalReceipts.Data
@using HospitalReceipts.Models
@using HospitalReceipts.Services
@inject AppDbContext _context
@inject IJSRuntime JS
@inject AuthService Auth

@code {
    [Parameter] public int bookId { get; set; }
    private string bookName = "";
    [Parameter] public string dateFromStr { get; set; } = "";
    [Parameter] public string dateToStr { get; set; } = "";
    private DateTime dateFrom = DateTime.Today;
    private DateTime dateTo = DateTime.Today;

    private class DayGroup
    {
        public DateTime Date { get; set; }
        public List<Receipt> Receipts { get; set; } = new();
        public double TotalAmount => Receipts.Sum(r => r.Amount);
    }


    private List<DayGroup> dayGroups = new();
    private double grandTotalAmount = 0;
    private string reportHeaderTxt = "";
    private string pageFooterTxt = "";

    protected override void OnParametersSet()
    {
        if (!DateTime.TryParse(dateFromStr, CultureInfo.InvariantCulture, DateTimeStyles.None, out dateFrom))
        {
            dateFrom = DateTime.Today;
        }
        if (!DateTime.TryParse(dateToStr, CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTo))
        {
            dateTo = dateFrom; // fallback to same day if parsing fails
        }

        var book = _context.ReceiptBookMain
            .AsNoTracking()
            .FirstOrDefault(b => b.BookId == bookId);

        bookName = book != null ? book.BookName : $"Book {bookId}";

        var rawReceipts = _context.Receipts
    .AsNoTracking()
    .Where(r => r.BookId == bookId && r.Date.Date >= dateFrom.Date && r.Date.Date <= dateTo.Date)
    .OrderBy(r => r.Date)
    .ThenBy(r => r.ReceiptNo)
    .ToList();

        dayGroups = rawReceipts
            .GroupBy(r => r.Date.Date)
            .Select(g => new DayGroup
                {
                    Date = g.Key,
                    Receipts = g.ToList()
                })
            .OrderBy(g => g.Date)
            .ToList();

        grandTotalAmount = dayGroups.Sum(g => g.TotalAmount);
        if (dateFrom == dateTo)
        {
            reportHeaderTxt = $"{bookName} - Day Summary for {dateFrom:dd MMM yyyy}";
            pageFooterTxt = $"{bookName} for {dateFrom:dd MMM yyyy}, Generated on {DateTime.Now:dd MMM yyyy HH:mm}";
        }
        else { 
        reportHeaderTxt = $"{bookName} - Day Summary from {dateFrom:dd MMM yyyy} to {dateTo:dd MMM yyyy}";
        pageFooterTxt = $"{bookName} for {dateFrom:dd MMM yyyy} → {dateTo:dd MMM yyyy}, Generated on {DateTime.Now:dd MMM yyyy HH:mm}";

        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("paginateContent", reportHeaderTxt, pageFooterTxt);
        }
    }


    private async Task PrintPage()
    {
        await JS.InvokeVoidAsync("eval", "setTimeout(() => window.print(), 300)");
        
    }
}

@if (Auth.CurrentUser == null)
{
    <p>You must <a href="/login">login</a> to access this page.</p>

}
else
{
    <p><strong>Current User:</strong> @Auth.CurrentUser.UserName (@Auth.CurrentUser.Privilege)</p>
    
}
<div hidden="@(!(Auth.CurrentUser != null))"> <!--if not loged in, hide entire page-->
<!-- Toolbar (screen only) -->
<div class="no-print" style="margin-bottom:12px;">
    <button class="btn btn-primary" @onclick="PrintPage">Print</button>
</div>

<div id="sourceContent" style="display:none">

    @foreach (var group in dayGroups)
    {
        <!-- Day Header -->
        <div class="dayHeader">
            <strong>@group.Date.ToString("dd MMM yyyy")</strong>
        </div>

        <!-- Column Header -->
        <div class="columnHeader">
            <span>R No</span>
            <span>Name</span>
            <span>Amount</span>
        </div>

        <!-- Receipts for that day -->
        @foreach (var r in group.Receipts)
        {
            <div class="receiptRow">
                <span>@r.ReceiptNo</span>
                <span>@r.Name</span>
                <span>@r.Amount.ToString("#0.00")</span>
            </div>
        }

        <!-- Day Total -->
        <div class="receiptTotal">
            <span></span>
            <span><b>Day Total</b></span>
            <span><b>@group.TotalAmount.ToString("C")</b></span>
        </div>

        
    }

    <!-- Grand Total -->
    <div class="receiptTotal">
        <span></span>
        <span><b>Grand Total</b></span>
        <span><b>@grandTotalAmount.ToString("C")</b></span>
    </div>
</div>

<!-- Printable Area -->
<div id="printableArea">
    <div id="pagesContainer">
        <!-- Pages will be dynamically added here -->
    </div>
</div>
</div>
<style>
    
    /* Screen view */
    .a4page {
        width: 210mm;
        height: 297mm;
        margin: 0 auto;
        padding: 10mm;
        box-sizing: border-box;
        border: 1px solid #ccc;
        background: white;
        box-shadow: 0 0 5px rgba(0,0,0,0.2);
        position: relative; /* Important: allow absolute children */
        page-break-after: always;
        /*font-size: 10;*/
    }

    .two-column-container {
        column-count: 2;
        column-gap: 10mm;
        column-fill: auto;
        height: calc(297mm - 20mm); /* page height minus header+footer */
        margin: 0;
        padding: 0;
    }

    .pageContent {
        flex: 1; /* takes available space between header and footer */
        text-align: justify;
        margin: 0;
        padding: 0;
    }

    .dummyContainer {
        background-color: aqua;
    }



    .pageNumber {
        position: absolute;
        top: 5mm;
        right: 10mm;
        font-size: 12px;
        color: black;
    }

    .pageHeader {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 10mm;
        border-bottom: 1px solid black; /* header bottom border box */
        margin-left: 10mm;
        margin-right: 10mm;
        /*background-color: lightblue;*/
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 16px;
    }



    .pageFooter {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 10mm;
        margin-left: 10mm;
        margin-right: 10mm;
        border-top: 1px solid black; /* header bottom border box */
        /*background-color: lightblue;*/
        display: flex;
        align-items: top;
        justify-content: center;
        font-weight: normal;
        font-size: 10;
    }

    /*--------*/
    .dayHeader{
        margin-top: 8px;
        margin-bottom: 4px;
        padding: 4px;
        font-size: 14px;
        font-weight: bold;
        display: block;
        border: 2px solid #000;
        background-color: lightgray !important;
        justify-content: center;
        text-align: center;

    }
    .columnHeader {
        display: flex;
        justify-content: space-between;
        
        padding: 4px;
        font-weight: bold;
        border-bottom: 2px solid black;
    }

   

    .receiptRow {
        display: grid;
        grid-template-columns: 50px 1fr 100px; /* ReceiptNo | Name | Amount */
        /*padding: 4px 8px;*/
        border-bottom: 1px solid #ccc;
        
        break-inside: avoid; /* Prevent a row from splitting across columns */
        font-size :16px;
        line-height: 20px; /* lock line spacing */
        height: 22px; /* force exact height */
        overflow: hidden;
    }

        .receiptRow span:first-child {
            text-align: right;
            padding-right: 5px;
            border-left: 1px solid #ccc;
        }

        .receiptRow span:nth-child(2) {
            text-align: left;
            padding-left: 5px;
            border-right: 1px solid #ccc;
            border-left: 1px solid #ccc;
            
        }

        .receiptRow span:last-child {
            text-align: right;
            padding-right: 10px;
            border-right: 1px solid #ccc;
        }

    .receiptTotal {
        border-top: 3px solid black;
        /*font-weight: bold;*/
        display: flex;
        justify-content: space-between;
        /*border-bottom: 1px solid #ccc;*/
        border-bottom: none;
        padding: 4px;
    }

    /*----------*/
    /* Print styles*/
    /* Remove shadows/borders when printing */
    @@page {
        size: A4;
        margin: 5mm; /*it should be equal to the padding in a4page style,  then in a4page style set padding to 0*/
    }
    @@media print {
        
        body * {
            visibility: hidden; /* hide everything */
        }

        #printableArea, #printableArea * {
            visibility: visible; /* only show printable area */
        }

        #printableArea {
            position: absolute;
            left: 0;
            top: 0;
        }

       

        .a4page {
            width: 210mm;
            height: 297mm;
            margin: 0 auto;
            padding: 10mm; 
            box-sizing: border-box;
            border: 1px solid #ccc;
            background: white;
            box-shadow:none;
            position: relative; /* Important: allow absolute children */
            page-break-after: always;
            /*font-size: 10px;*/
        }

        .dayHeader {
            background-color: lightgray !important;
            -webkit-print-color-adjust: exact;
            print-color-adjust: exact;
            color-adjust: exact; /* for Firefox */
        }
        
}
    

</style>
