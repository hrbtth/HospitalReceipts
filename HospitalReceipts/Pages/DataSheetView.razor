@using HospitalReceipts.Data
@using HospitalReceipts.Models
@using Microsoft.EntityFrameworkCore

@page "/datasheet/{bookId:int}"
@using HospitalReceipts.Services
@inject AppDbContext _context
@inject NavigationManager Nav
@inject AuthService Auth

<h3>Data Sheet View - Book @bookId</h3>
@if (Auth.CurrentUser == null || Auth.CurrentUser.Privilege == "USER")
{
    <p>You must <a href="/login">login</a> as ADMIN to access this page.</p>

}

else
{
    <p><strong>Current User:</strong> @Auth.CurrentUser.UserName (@Auth.CurrentUser.Privilege)</p>
    
}
<!--if not loged in as ADMIN, hide entire page-->
<div hidden="@((Auth.CurrentUser ==null || Auth.CurrentUser.Privilege =="USER" ))">

@if (receipts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <button class="btn btn-primary mb-2" @onclick="async () => await SavePage()">Save This Page</button>

    </div>

    <table class="table table-striped table-sm">
        <thead>
            <tr>
                <th>R.No</th>
                <th>Date</th>
                <th>Name</th>
                <th>Amount</th>
                <th>Towards</th>
                
                <!-- Add more columns except IDs -->
            </tr>
        </thead>
        <tbody>
            @foreach (var receipt in receipts)
            {
                <tr>
                    <td>
                        <InputNumber @bind-Value="receipt.ReceiptNo" class="form-control form-control-sm" />
                    </td>
                    <td>
                        <InputDate @bind-Value="receipt.Date" class="form-control form-control-sm" />
                    </td>
                    <td>
                        <InputText @bind-Value="receipt.Name" class="form-control form-control-sm" />
                    </td>
                    <td>
                        <InputNumber @bind-Value="receipt.Amount" class="form-control form-control-sm" />
                    </td>
                    <td>
                        <InputText @bind-Value="receipt.Towards" class="form-control form-control-sm" />
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-3">
        <button class="btn btn-secondary me-2" @onclick="PrevPage" disabled="@(_pageIndex == 1)">⬅ Prev</button>
        <span>Page @_pageIndex of @_totalPages</span>
        <button class="btn btn-secondary ms-2" @onclick="NextPage" disabled="@(_pageIndex == _totalPages)">Next ➡</button>
    </div>
}
</div>
@code {
    [Parameter] public int bookId { get; set; }

    private List<Receipt>? receipts;
    private int _pageIndex = 1;
    private int _pageSize = 100;   // show 100 per page
    private int _totalPages;

    protected override void OnParametersSet()
    {
        LoadPage();
    }

    private async Task LoadPage()
    {
        var query = _context.Receipts.Where(r => r.BookId == bookId);

        int totalCount = await query.CountAsync();
        _totalPages = (int)Math.Ceiling(totalCount / (double)_pageSize);

        receipts = await query
            .OrderBy(r => r.ReceiptNo)
            .Skip((_pageIndex - 1) * _pageSize)
            .Take(_pageSize)
            .ToListAsync();
    }

    private async Task SavePage()
    {
        if (receipts != null)
        {
            _context.UpdateRange(receipts);
            await _context.SaveChangesAsync();
        }
    }


    private async Task PrevPage()
    {
        if (_pageIndex > 1)
        {
            await SavePage();
            _pageIndex--;
            await LoadPage();
        }
    }

    private async Task NextPage()
    {
        if (_pageIndex < _totalPages)
        {
            await SavePage();
            _pageIndex++;
            await LoadPage();
        }
    }

   

    
}

