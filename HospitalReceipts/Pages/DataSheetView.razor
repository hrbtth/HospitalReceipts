@using HospitalReceipts.Data
@using HospitalReceipts.Models
@using Microsoft.EntityFrameworkCore

@page "/datasheet/{bookId:int}"
@using HospitalReceipts.Services
@inject AppDbContext _context
@inject NavigationManager Nav
@inject AuthService Auth
@inject IJSRuntime JS

<h3>Data Sheet View - Book @bookId</h3>
@if (Auth.CurrentUser == null || Auth.CurrentUser.Privilege == "USER")
{
    <p>You must <a href="/login">login</a> as ADMIN to access this page.</p>

}

else
{
    <p><strong>Current User:</strong> @Auth.CurrentUser.UserName (@Auth.CurrentUser.Privilege)</p>
    
}
<!--if not loged in as ADMIN, hide entire page-->
<div hidden="@((Auth.CurrentUser ==null || Auth.CurrentUser.Privilege =="USER" ))">

@if (receipts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
        <div>
            <button class="btn btn-primary mb-2" @onclick="async () => await SavePage()">Save This Page</button>
            <button hidden="@(Auth.CurrentUser?.Privilege!="SUPER ADMIN")" class="btn btn-danger mb-2" @onclick="ConfirmRenumber">Re-Number This Book</button>
        </div>
        @if (showConfirm)
        {
            <div class="alert alert-warning mt-2">
                <strong>Are you sure?</strong> You want to re-number? It cannot be reversed. <br />
                <button class="btn btn-danger btn-sm me-2" @onclick="async () => await RenumberBook()">Yes, Re-Number</button>
                <button class="btn btn-secondary btn-sm" @onclick="() => showConfirm = false">Cancel</button>
            </div>
        }

        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>R.No</th>
                    <th>Date</th>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Towards</th>
                    <th></th> <!-- column for delete button -->
                </tr>
            </thead>
            <tbody>
                @foreach (var receipt in receipts)
                {
                    <tr>
                        <td>
                            <InputNumber @bind-Value="receipt.ReceiptNo" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <InputDate @bind-Value="receipt.Date" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <InputText @bind-Value="receipt.Name" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <InputNumber @bind-Value="receipt.Amount" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <InputText @bind-Value="receipt.Towards" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm"
                                    @onclick="() => ConfirmDelete(receipt)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (deleteConfirmReceipt != null)
        {
            <div class="alert alert-warning mt-2">
                <strong>Confirm Delete:</strong> Are you sure you want to delete receipt
                <b>@deleteConfirmReceipt.ReceiptNo</b> ( @deleteConfirmReceipt.Name )?<br />
                <button class="btn btn-danger btn-sm me-2" @onclick="() => DeleteReceipt(deleteConfirmReceipt)">Yes, Delete</button>
                <button class="btn btn-secondary btn-sm" @onclick="() => deleteConfirmReceipt = null">Cancel</button>
            </div>
        }


    <div class="mt-3">
        <button class="btn btn-secondary me-2" @onclick="PrevPage" disabled="@(_pageIndex == 1)">⬅ Prev</button>
        <span>Page @_pageIndex of @_totalPages</span>
        <button class="btn btn-secondary ms-2" @onclick="NextPage" disabled="@(_pageIndex == _totalPages)">Next ➡</button>
    </div>
}
</div>
@code {
    [Parameter] public int bookId { get; set; }

    private List<Receipt>? receipts;
    private int _pageIndex = 1;
    private int _pageSize = 100;   // show 100 per page
    private int _totalPages;

    protected override void OnParametersSet()
    {
        LoadPage();
    }

    private async Task LoadPage()
    {
        var query = _context.Receipts.Where(r => r.BookId == bookId);

        int totalCount = await query.CountAsync();
        _totalPages = (int)Math.Ceiling(totalCount / (double)_pageSize);

        receipts = await query
            .OrderBy(r => r.ReceiptNo)
            .Skip((_pageIndex - 1) * _pageSize)
            .Take(_pageSize)
            .ToListAsync();
    }

    private async Task SavePage()
    {
        if (receipts != null)
        {
            _context.UpdateRange(receipts);
            await _context.SaveChangesAsync();

            // Show JS alert
            await JS.InvokeVoidAsync("alert", "Saved successfully!");
        }
    }


    private async Task PrevPage()
    {
        if (_pageIndex > 1)
        {
            await SavePage();
            _pageIndex--;
            await LoadPage();
        }
    }

    private async Task NextPage()
    {
        if (_pageIndex < _totalPages)
        {
            await SavePage();
            _pageIndex++;
            await LoadPage();
        }
    }

    private bool showConfirm = false;

    private void ConfirmRenumber()
    {
        showConfirm = true;
    }

    private async Task RenumberBook()
    {
        showConfirm = false;

        // Load all receipts of this book
        var allReceipts = await _context.Receipts
            .Where(r => r.BookId == bookId)
            .OrderBy(r => r.Date)
            .ThenBy(r => r.ReceiptNo)
            .ToListAsync();

        int newNo = 1;
        foreach (var r in allReceipts)
        {
            r.ReceiptNo = newNo++;
        }

        // Update NextReceiptNo in ReceiptBookMain
        var book = await _context.ReceiptBookMain.FirstOrDefaultAsync(b => b.BookId == bookId);
        if (book != null)
        {
            book.NextReceiptNo = newNo;
        }

        await _context.SaveChangesAsync();

        // Reload current page
        await LoadPage();
    }
    // code for delete
    private Receipt? deleteConfirmReceipt;

    private void ConfirmDelete(Receipt receipt)
    {
        deleteConfirmReceipt = receipt;
    }

    private async Task DeleteReceipt(Receipt receipt)
    {
        if (receipt != null)
        {
            _context.Receipts.Remove(receipt);
            await _context.SaveChangesAsync();
            deleteConfirmReceipt = null;
            await LoadPage();
        }
    }


    
}

