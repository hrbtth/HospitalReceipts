@page "/books"
@using HospitalReceipts.Data
@using Microsoft.EntityFrameworkCore
@using HospitalReceipts.Models
@using HospitalReceipts.Services
@inject AppDbContext Db
@inject AuthService Auth

<h3>Books</h3>
@if (Auth.CurrentUser == null || Auth.CurrentUser.Privilege == "USER")
{
    <p>You must <a href="/login">login</a> as ADMIN to access this page.</p>

}

else
{
    <p><strong>Current User:</strong> @Auth.CurrentUser.UserName (@Auth.CurrentUser.Privilege)</p>
    
}
<!--if not loged in as ADMIN, hide entire page-->
<div hidden="@((Auth.CurrentUser ==null || Auth.CurrentUser.Privilege =="USER" ))">
    

<!-- Button to add new book -->
<button class="btn btn-primary mb-3" @onclick="AddBook">Add New Book</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>BookId</th>
            <th>Book Name</th>
            <th>Header1</th>
            <th>Header2</th>
            <th>Header3</th>
            <th>Default Amount</th>
            <th>Default Towards</th>
            <th>Next Receipt No</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (books != null)
        {
            @foreach (var book in books)
            {
                <tr>
                    @if (editBook == book)
                    {
                        <!-- Editing row -->
                        <td>@book.BookId</td>
                        <td><input class="form-control" @bind="book.BookName" /></td>
                        <td><input class="form-control" @bind="book.Header1" /></td>
                        <td><input class="form-control" @bind="book.Header2" /></td>
                        <td><input class="form-control" @bind="book.Header3" /></td>
                        <td><input type="number" class="form-control" @bind="book.DefaultAmount" /></td>
                        <td><input class="form-control" @bind="book.DefaultTowards" /></td>
                        <td><input type="number" class="form-control" @bind="book.NextReceiptNo" /></td>
                        <td>
                            <button class="btn btn-success btn-sm" @onclick="() => SaveBook(book)">Save</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                        </td>
                    }
                    else
                    {
                        <!-- Normal row -->
                        <td>@book.BookId</td>
                        <td>@book.BookName</td>
                        <td>@book.Header1</td>
                        <td>@book.Header2</td>
                        <td>@book.Header3</td>
                        <td>@book.DefaultAmount</td>
                        <td>@book.DefaultTowards</td>
                        <td>@book.NextReceiptNo</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => EditBook(book)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(book)">Delete</button>
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>

<!-- Confirmation Dialog -->
@if (deleteBook != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete <b>@deleteBook.BookName</b> (BookId: @deleteBook.BookId)?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteBook">Yes, Delete</button>
                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    
}
</div>

@code {
    private List<ReceiptBookMain>? books;
    private ReceiptBookMain? editBook;
    private ReceiptBookMain? deleteBook;

    protected override async Task OnInitializedAsync()
    {
        books = await Db.ReceiptBookMain.ToListAsync();
    }

    private void AddBook()
    {
        var newBook = new ReceiptBookMain
        {
            BookName = "New Doctor",
            Header1 = "",
            Header2 = "",
            Header3 = "",
            DefaultAmount = 0,
            DefaultTowards = "",
            NextReceiptNo = 1
        };

        books!.Add(newBook);
        editBook = newBook;
    }

    private void EditBook(ReceiptBookMain book)
    {
        editBook = book;
    }

    private async Task SaveBook(ReceiptBookMain book)
    {
        if (book.BookId == 0) // New record
        {
            Db.ReceiptBookMain.Add(book);
        }
        else
        {
            Db.ReceiptBookMain.Update(book);
        }

        await Db.SaveChangesAsync();
        editBook = null;
        books = await Db.ReceiptBookMain.ToListAsync(); // reload list
    }

    private void CancelEdit()
    {
        editBook = null;
        StateHasChanged();
    }

    private void ConfirmDelete(ReceiptBookMain book)
    {
        deleteBook = book;
    }

    private async Task DeleteBook()
    {
        if (deleteBook != null)
        {
            Db.ReceiptBookMain.Remove(deleteBook);
            await Db.SaveChangesAsync();
            books = await Db.ReceiptBookMain.ToListAsync();
            deleteBook = null;
        }
    }

    private void CancelDelete()
    {
        deleteBook = null;
    }
}
