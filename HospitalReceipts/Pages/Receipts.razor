@page "/receipts"
@using System.Linq
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using HospitalReceipts.Data
@using HospitalReceipts.Models
@inject AppDbContext _context
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<h3>Receipts</h3>

<div class="d-flex">
    <!-- Left: books panel -->
    @if (!hideLeftPanel)
    {
        <div class="border-end p-2" style="width:250px; max-height:80vh; overflow-y:auto;">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h5>Receipt Books</h5>
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleLeftPanel">&lt;&lt; Hide</button>
            </div>
            <ul class="list-group">
                @foreach (var b in books)
                {
                    <li class="list-group-item list-group-item-action custom-active @(b.BookId == selectedBookId ? "active" : "")"
                        style="cursor:pointer"
                        @onclick="async () => await SelectBook(b.BookId)">
                        @b.BookName
                    </li>
                }
            </ul>

        </div>
    }

    <!-- Right: receipts table -->
    <div class="flex-grow-1 d-flex flex-column" style="height:80vh;">
        <!-- Buttons + left panel toggle -->
        <div class="flex-shrink-0 d-flex mb-2">
            <button class="btn btn-sm btn-outline-secondary me-2 ms-3" @onclick="ToggleLeftPanel">
                @(hideLeftPanel ? "Show Books" : "")
            </button>
            <button class="btn btn-primary me-2 btn-sm" @onclick="PrintReceipt" disabled="@(!IsReceiptSelected)">Print Receipt</button>
            <button class="btn btn-info me-2 btn-sm" @onclick="ShowDaySummaryModal" disabled="@(!IsBookSelected)">Day Summary</button>
            <button class="btn btn-primary me-2 btn-sm" @onclick="ShowAddModal" disabled="@(!IsBookSelected)">Add</button>
            <button class="btn btn-warning me-2 btn-sm" @onclick="ShowEditModal" disabled="@(!IsReceiptSelected)">Edit</button>
            <button class="btn btn-danger btn-sm" @onclick="DeleteSelected" disabled="@(!IsReceiptSelected)">Delete</button>
        </div>

        <!-- Header below buttons -->
        <div class="flex-shrink-0">
            <h5 class="text-center w-100 my-2">Receipts for @selectedBookName</h5>
        </div>

        <!-- Scrollable table -->
        <div class="table-responsive flex-grow-1" style="overflow-y:auto; max-height:100%;">
            <table class="table table-striped table-hover mb-0">
                <thead class="table-light sticky-top">
                    <tr>
                        <th>No</th>
                        <th>Date</th>
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Towards</th>
                        <th>Printed</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in receipts)
                    {
                        <tr class="@(selectedReceiptId == r.ReceiptId ? "table-active" : "")"
                            style="cursor:pointer"
                            @onclick="() => SelectReceipt(r.ReceiptId)">
                            <td>@r.ReceiptNo</td>
                            <td>@r.Date.ToString("dd-MM-yyyy")</td>
                            <td>@r.Name</td>
                            <td>@r.Amount</td>
                            <td>@r.Towards</td>
                            <td>@r.Printed</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </div>
</div>

<!-- Add/Edit Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle Receipt</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(saveError))
                    {
                        <div class="alert alert-danger">@saveError</div>
                    }

                    <EditForm Model="editReceipt" OnValidSubmit="SaveReceipt">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Receipt No</label>
                            <InputNumber class="form-control" @bind-Value="editReceipt.ReceiptNo" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Date</label>
                            <InputDate class="form-control" @bind-Value="editReceipt.Date" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText class="form-control" @bind-Value="editReceipt.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Amount</label>
                            <InputNumber class="form-control" @bind-Value="editReceipt.Amount" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Towards</label>
                            <InputText class="form-control" @bind-Value="editReceipt.Towards" />
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                }
                                Save
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal" disabled="@isSaving">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Day Summary Modal -->
@if (showDaySummaryModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Day Summary</h5>
                    <button type="button" class="btn-close" @onclick="CloseDaySummaryModal"></button>
                </div>
                <div class="modal-body">
                    <label class="form-label">From Date</label>
                    <InputDate @bind-Value="daySummaryFrom" class="form-control" />

                    <label class="form-label mt-2">To Date</label>
                    <InputDate @bind-Value="daySummaryTo" class="form-control" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="NavigateToDaySummary">OK</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseDaySummaryModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
<style>
    .list-group-item.active {
        background-color: rgba(0, 0, 0, 0.05) !important; /* very light */
        color: #000 !important;
        border-color: #dee2e6 !important;
    }

</style>

@code {
    // State
    private List<ReceiptBookMain> books = new();
    private List<Receipt> receipts = new();

    private int selectedBookId;
    private string selectedBookName = "";
    private int selectedReceiptId;

    private bool IsBookSelected => selectedBookId > 0;
    private bool IsReceiptSelected => selectedReceiptId > 0;

    // Add/Edit modal state
    private bool showModal = false;
    private string modalTitle = "";
    private Receipt editReceipt = new Receipt();

    // Day Summary modal state
    private bool showDaySummaryModal = false;    
    private DateTime daySummaryFrom = DateTime.Today;
    private DateTime daySummaryTo = DateTime.Today;

    // Save state
    private bool isSaving = false;
    private string saveError = null;

    // Left panel toggle
    private bool hideLeftPanel = false;

    protected override async Task OnInitializedAsync()
    {
        books = await _context.ReceiptBookMain
            .AsNoTracking()
            .OrderBy(b => b.BookName)
            .ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var storedId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lastSelectedBookId");

                if (!string.IsNullOrEmpty(storedId) && int.TryParse(storedId, out var bookId))
                {
                    // restore selection if available
                    await SelectBook(bookId);
                    StateHasChanged();
                }
            }
            catch
            {
                // ignore if localStorage not available
            }
        }
    }


    private async Task SelectBook(int bookId)
    {
        selectedBookId = bookId;
        var book = books.FirstOrDefault(b => b.BookId == bookId);
        selectedBookName = book != null ? book.BookName : "";

        receipts = await _context.Receipts
            .AsNoTracking()
            .Where(r => r.BookId == bookId)
            .OrderByDescending(r => r.ReceiptNo)
            .ToListAsync();

        selectedReceiptId = 0;

        
        // persist selection in localStorage
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lastSelectedBookId", selectedBookId.ToString());
        }
        catch
        {
            // ignore if JS not available
        }

    }

    private void SelectReceipt(int receiptId)
    {
        selectedReceiptId = receiptId;
    }

    private async Task ShowAddModal()
    {
        if (!IsBookSelected) return;

        var book = await _context.ReceiptBookMain
            .AsNoTracking()
            .FirstOrDefaultAsync(b => b.BookId == selectedBookId);
        if (book == null) return;

        editReceipt = new Receipt
        {
            ReceiptId = 0,
            BookId = selectedBookId,
            ReceiptNo = book.NextReceiptNo,
            Date = DateTime.Today,
            Name = "",
            Amount = book.DefaultAmount.HasValue ? (double)book.DefaultAmount.Value : 0d,
            Towards = book.DefaultTowards,
            Printed = 0
        };

        modalTitle = "Add";
        saveError = null;
        showModal = true;
    }

    private async Task ShowEditModal()
    {
        if (!IsReceiptSelected) return;

        var r = await _context.Receipts
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.ReceiptId == selectedReceiptId);
        if (r == null) return;

        editReceipt = new Receipt
        {
            ReceiptId = r.ReceiptId,
            BookId = r.BookId,
            ReceiptNo = r.ReceiptNo,
            Date = r.Date,
            Name = r.Name,
            Amount = r.Amount,
            Towards = r.Towards,
            Printed = r.Printed
        };

        modalTitle = "Edit";
        saveError = null;
        showModal = true;
    }

    private void CloseModal() => showModal = false;

    private async Task DeleteSelected()
    {
        if (!IsReceiptSelected) return;

        var rec = await _context.Receipts.FirstOrDefaultAsync(x => x.ReceiptId == selectedReceiptId);
        if (rec == null) return;

        _context.Receipts.Remove(rec);
        await _context.SaveChangesAsync();

        await SelectBook(selectedBookId);
    }

    private async Task SaveReceipt()
    {
        isSaving = true;
        saveError = null;

        try
        {
            if (editReceipt == null)
                throw new InvalidOperationException("No receipt to save.");

            if (editReceipt.ReceiptId == 0)
            {
                _context.Receipts.Add(editReceipt);

                var book = await _context.ReceiptBookMain.FirstOrDefaultAsync(b => b.BookId == editReceipt.BookId);
                if (book != null && editReceipt.ReceiptNo >= book.NextReceiptNo)
                {
                    book.NextReceiptNo = editReceipt.ReceiptNo + 1;
                }
            }
            else
            {
                _context.Receipts.Update(editReceipt);
            }

            await _context.SaveChangesAsync();

            showModal = false;
            await SelectBook(selectedBookId);
        }
        catch (Exception ex)
        {
            saveError = ex.Message;
            Console.WriteLine("SaveReceipt error: " + ex);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void PrintReceipt()
    {
        if (!IsReceiptSelected) return;
        NavManager.NavigateTo($"/receipt-print/{selectedReceiptId}");
    }

    private void ShowDaySummaryModal()
    {
        if (!IsBookSelected) return;
        daySummaryFrom = DateTime.Today;
        daySummaryTo = daySummaryFrom;
        showDaySummaryModal = true;
    }

    private void CloseDaySummaryModal() => showDaySummaryModal = false;

    private void NavigateToDaySummary()
    {
        // Navigate with both dates in yyyy-MM-dd format
        var fromStr = daySummaryFrom.ToString("yyyy-MM-dd");
        var toStr = daySummaryTo.ToString("yyyy-MM-dd");

        NavManager.NavigateTo($"/day-summary/{selectedBookId}/{fromStr}/{toStr}");
        CloseDaySummaryModal();
    }

    private void ToggleLeftPanel() => hideLeftPanel = !hideLeftPanel;
}
