@page "/receipts"
@using System.Linq
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using HospitalReceipts.Data
@using HospitalReceipts.Models
@inject AppDbContext _context
@inject NavigationManager NavManager   

<h3>Receipts</h3>

<div class="row">
    <!-- Left: books -->
    <div class="col-3 border-end" style="max-height:80vh; overflow-y:auto;">
        <h5 class="mt-2">Receipt Books</h5>
        <ul class="list-group">
            @foreach (var b in books)
            {
                <li class="list-group-item list-group-item-action @(b.BookId == selectedBookId ? "active" : "")"
                    style="cursor:pointer"
                    @onclick="() => SelectBook(b.BookId)">
                    @b.BookName
                </li>
            }
        </ul>
    </div>

    <!-- Right: receipts -->
    <div class="col-9">
        <div class="d-flex justify-content-between align-items-center mt-2 mb-2">
            <h5>Receipts for @selectedBookName</h5>
            <div>
                <!-- Changed Print button -->
                <button class="btn btn-primary me-2" 
                        @onclick="PrintReceipt" 
                        disabled="@(!IsReceiptSelected)">
                    Print Receipt
                </button>

                <button class="btn btn-primary me-2" @onclick="ShowAddModal" disabled="@(!IsBookSelected)">Add</button>
                <button class="btn btn-warning me-2" @onclick="ShowEditModal" disabled="@(!IsReceiptSelected)">Edit</button>
                <button class="btn btn-danger" @onclick="DeleteSelected" disabled="@(!IsReceiptSelected)">Delete</button>
            </div>
        </div>

        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Date</th>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Towards</th>
                    <th>Printed</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var r in receipts)
                {
                    <tr class="@(selectedReceiptId == r.ReceiptId ? "table-active" : "")"
                        style="cursor:pointer"
                        @onclick="() => SelectReceipt(r.ReceiptId)">
                        <td>@r.ReceiptNo</td>
                        <td>@r.Date.ToString("dd-MM-yyyy")</td>
                        <td>@r.Name</td>
                        <td>@r.Amount</td>
                        <td>@r.Towards</td>
                        <td>@r.Printed</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Add/Edit Modal stays the same... -->

@code {
    // State
    private List<ReceiptBookMain> books = new();
    private List<Receipt> receipts = new();

    private int selectedBookId;
    private string selectedBookName = "";
    private int selectedReceiptId;

    private bool IsBookSelected => selectedBookId > 0;
    private bool IsReceiptSelected => selectedReceiptId > 0;

    // Modal state
    private bool showModal = false;
    private string modalTitle = "";
    private Receipt editReceipt = new Receipt();

    protected override void OnInitialized()
    {
        books = _context.ReceiptBookMain
            .AsNoTracking()
            .OrderBy(b => b.BookName)
            .ToList();
    }

    private void SelectBook(int bookId)
    {
        selectedBookId = bookId;
        var book = books.FirstOrDefault(b => b.BookId == bookId);
        selectedBookName = book != null ? book.BookName : "";

        receipts = _context.Receipts
            .AsNoTracking()
            .Where(r => r.BookId == bookId)
            .OrderBy(r => r.ReceiptNo)
            .ToList();

        selectedReceiptId = 0;
    }

    private void SelectReceipt(int receiptId)
    {
        selectedReceiptId = receiptId;
    }

    private void ShowAddModal()
    {
        if (!IsBookSelected) return;

        var book = _context.ReceiptBookMain
            .AsNoTracking()
            .FirstOrDefault(b => b.BookId == selectedBookId);
        if (book == null) return;

        editReceipt = new Receipt
        {
            ReceiptId = 0,
            BookId = selectedBookId,
            ReceiptNo = book.NextReceiptNo,
            Date = DateTime.Today,
            Name = "",
            Amount = book.DefaultAmount.HasValue ? (double)book.DefaultAmount.Value : 0d,
            Towards = book.DefaultTowards,
            Printed = 0
        };

        modalTitle = "Add";
        showModal = true;
    }

    private void ShowEditModal()
    {
        if (!IsReceiptSelected) return;

        var r = _context.Receipts
            .AsNoTracking()
            .FirstOrDefault(x => x.ReceiptId == selectedReceiptId);
        if (r == null) return;

        editReceipt = new Receipt
        {
            ReceiptId = r.ReceiptId,
            BookId = r.BookId,
            ReceiptNo = r.ReceiptNo,
            Date = r.Date,
            Name = r.Name,
            Amount = r.Amount,
            Towards = r.Towards,
            Printed = r.Printed
        };

        modalTitle = "Edit";
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void DeleteSelected()
    {
        if (!IsReceiptSelected) return;

        var rec = _context.Receipts.FirstOrDefault(x => x.ReceiptId == selectedReceiptId);
        if (rec == null) return;

        _context.Receipts.Remove(rec);
        _context.SaveChanges();

        SelectBook(selectedBookId);
    }

    private void SaveReceipt()
    {
        if (editReceipt.ReceiptId == 0)
        {
            _context.Receipts.Add(editReceipt);

            var book = _context.ReceiptBookMain.FirstOrDefault(b => b.BookId == editReceipt.BookId);
            if (book != null)
            {
                if (editReceipt.ReceiptNo >= book.NextReceiptNo)
                    book.NextReceiptNo = editReceipt.ReceiptNo + 1;
            }
        }
        else
        {
            _context.Receipts.Update(editReceipt);
        }

        _context.SaveChanges();
        showModal = false;

        SelectBook(selectedBookId);
    }

    //PrintReceipt just navigates
    private void PrintReceipt()
    {
        if (!IsReceiptSelected) return;
        NavManager.NavigateTo($"/receipt-print/{selectedReceiptId}");
    }
}
