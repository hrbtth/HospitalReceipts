@page "/users"
@inject HospitalReceipts.Services.AuthService Auth
@inject NavigationManager Nav
@inject IJSRuntime JS

<h3>User Management</h3>

@if (Auth.CurrentUser == null)
{
    <p>You must <a href="/login">login</a> to access this page.</p>
}
else
{
    <p><strong>Current User:</strong> @Auth.CurrentUser.UserName (@Auth.CurrentUser.Privilege)</p>
    <h4>Change Your Password</h4>
    <div class="mb-3">
        <input @bind="oldPassword" class="form-control" type="password" placeholder="Old Password" />
    </div>
    @if (!string.IsNullOrEmpty(passwordMessage))
    {
        <div class="mt-2 text-danger">@passwordMessage</div>
    }
    <div class="mb-3">
        <input @bind="newPasswordSelf" class="form-control" type="password" placeholder="New Password" />
    </div>
    <button class="btn btn-primary" @onclick="ChangeOwnPassword">Change Password</button>
    
    if (Auth.CurrentUser.Privilege == "ADMIN" || Auth.CurrentUser.Privilege == "SUPER ADMIN")
    {
        
        <h4>Create New User</h4>
        <div class="mb-3">
            <input @bind="newUserName" class="form-control" placeholder="Username" />
        </div>
        <div class="mb-3">
            <input @bind="newPassword" class="form-control" type="password" placeholder="Password" />
        </div>
        <div class="mb-3">
            <select @bind="newPrivilege" class="form-control">
                @foreach (var role in availablePrivileges)
                {
                    <option value="@role">@role</option>
                }
                
            </select>
        </div>
        <button class="btn btn-primary" @onclick="CreateUser">Create</button>
    }
    if(Auth.CurrentUser.Privilege == "SUPER ADMIN")
    {
        <hr />
        <h4>Manage All Users</h4>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Privilege</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td>
                            @if (user.UserName == Auth.CurrentUser.UserName)
                            {
                                @user.Privilege
                            }
                            else
                            {
                                <select class="form-control form-control-sm"
                                        @onchange="e => ChangeUserPrivilege(e, user.UserName)">
                                    <option value="USER" selected="@("USER" == user.Privilege)">USER</option>
                                    <option value="ADMIN" selected="@("ADMIN" == user.Privilege)">ADMIN</option>
                                    <option value="SUPER ADMIN" selected="@("SUPER ADMIN" == user.Privilege)">SUPER ADMIN</option>
                                </select>
                                
                            }
                            
                        </td>

                        <td>
                            @if (user.UserName != Auth.CurrentUser.UserName)
                            {
                                <button class="btn btn-warning btn-sm me-2"
                                        @onclick="() => OpenResetModal(user.UserName)">
                                    Reset Password
                                </button>
                                <button class="btn btn-danger btn-sm"
                                        @onclick="() => ConfirmDeleteUser(user.UserName)">
                                    Delete
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (showResetModal)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Reset Password - @resetUserName</h5>
                            <button type="button" class="btn-close" @onclick="CloseResetModal"></button>
                        </div>
                        <div class="modal-body">
                            <input @bind="resetPassword" type="password" class="form-control" placeholder="Enter new password (can be blank)" />
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CloseResetModal">Cancel</button>
                            <button class="btn btn-danger" @onclick="ConfirmResetPassword">Reset</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        //toast popup mark up
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast align-items-center text-bg-success border-0"
                 role="alert" aria-live="assertive" aria-atomic="true"
                 id="successToast">
                <div class="d-flex">
                    <div class="toast-body">
                        @toastMessage
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto"
                            data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>


        <hr />
    }
}



@code {
    private List<HospitalReceipts.Models.AppUser> users = new();
    private string newUserName = string.Empty;
    private string newPassword = string.Empty;
    private string newPrivilege = "USER";

    // for self password change
    private string oldPassword = string.Empty;
    private string newPasswordSelf = string.Empty;
    private string passwordMessage = string.Empty;

    //to hold options of list box
    private List<string> availablePrivileges = new();

    protected override void OnInitialized()
    {
        if (Auth.CurrentUser?.Privilege != "USER")
        {
            users = Auth.GetAllUsers();
        }
        // Decide options available in listbox based on privilages
        if (Auth.CurrentUser?.Privilege == "SUPER ADMIN")
        {
            availablePrivileges = new() { "USER", "ADMIN", "SUPER ADMIN" };
        }
        else if (Auth.CurrentUser?.Privilege == "ADMIN")
        {
            availablePrivileges = new() { "USER", "ADMIN" };
        }
        else
        {
            availablePrivileges.Clear(); // USER has no create-user option
        }
    }

    private void CreateUser()
    {
        try
        {
            Auth.CreateUser(newUserName, newPassword, newPrivilege);
            users = Auth.GetAllUsers();
            newUserName = string.Empty;
            newPassword = string.Empty;
            newPrivilege = "USER";
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private void DeleteUser(string username)
    {
        try
        {
            Auth.DeleteUser(username);
            users = Auth.GetAllUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }
    private async Task ConfirmDeleteUser(string username)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {username}?");
        if (confirmed)
        {
            DeleteUser(username);
        }
    }

    private async Task ChangeOwnPassword()
    {
        try
        {
            passwordMessage = string.Empty;

            if (Auth.CurrentUser != null)
            {
                bool changed = Auth.ChangeOwnPassword(Auth.CurrentUser.UserName, oldPassword, newPasswordSelf);
                if (changed)
                {
                    // Show popup alert
                    await JS.InvokeVoidAsync("alert", "Password changed successfully. Please login again.");
                    // logout and redirect to login
                    Auth.Logout();
                    Nav.NavigateTo("/login", forceLoad: true);
                }
                else
                {
                    passwordMessage = "Old password incorrect!";
                }

                oldPassword = string.Empty;
                newPasswordSelf = string.Empty;
            }
        }
        catch (Exception ex)
        {
            passwordMessage = "Error: " + ex.Message;
        }
    }
    private void ChangePrivilege(string username, string? newPrivilege)
    {
        if (string.IsNullOrEmpty(newPrivilege)) return;

        try
        {
            Auth.ChangePrivilege(username, newPrivilege);
            users = Auth.GetAllUsers(); // reload list
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error changing privilege: " + ex.Message);
        }
    }

    

    // for reset password modal dialog
    private bool showResetModal = false;
    private string resetUserName = string.Empty;
    private string resetPassword = string.Empty;

    private void OpenResetModal(string username)
    {
        resetUserName = username;
        resetPassword = string.Empty; // reset each time
        showResetModal = true;
    }

    private void CloseResetModal()
    {
        showResetModal = false;
    }

    private async Task ConfirmResetPassword()
    {
        try
        {
            // resetPassword can be empty string ("")
            Auth.ResetPassword(resetUserName, resetPassword);
            await JS.InvokeVoidAsync("alert", $"Password for {resetUserName} has been reset.");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }

        showResetModal = false;
    }
    //for toast popup
    private string toastMessage = string.Empty;

    private async Task ChangeUserPrivilege(ChangeEventArgs e, string username)
    {
        var newPrivilege = e.Value?.ToString();
        if (!string.IsNullOrEmpty(newPrivilege))
        {
            try
            {
                Auth.ChangePrivilege(username, newPrivilege);
                toastMessage = $"{username} updated to {newPrivilege} ";
                await ShowToastAsync();
            }
            catch (UnauthorizedAccessException ex)
            {
                toastMessage = ex.Message;
                await ShowToastAsync();
            }
        }
    }

    private async Task ShowToastAsync()
    {
        await JS.InvokeVoidAsync("showBootstrapToast", "#successToast");
    }
}
